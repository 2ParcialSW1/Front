/**
 * Servicio para procesar im√°genes de diagramas de clases usando OpenAI Vision
 */

/**
 * Procesa una imagen de diagrama de clases y extrae la informaci√≥n usando OpenAI Vision
 * @param {File} imageFile - Archivo de imagen a procesar
 * @returns {Promise<Object>} - Objeto con clases, relaciones y asociaciones extra√≠das
 */
export async function processDiagramImage(imageFile) {
  try {
    console.log("üñºÔ∏è Procesando imagen de diagrama:", imageFile.name);
    
    const apiKey = import.meta.env.VITE_OPENAI_API_KEY;
    
    if (!apiKey) {
      throw new Error(
        "La clave de API de OpenAI no est√° definida. Aseg√∫rate de configurar VITE_OPENAI_API_KEY en tu archivo .env."
      );
    }

    // Verificar tipo de imagen
    const validImageTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
    if (!validImageTypes.includes(imageFile.type)) {
      throw new Error(`Tipo de imagen no v√°lido: ${imageFile.type}. Usa JPG, PNG, GIF o WEBP.`);
    }

    // Convertir imagen a base64
    const base64Image = await convertImageToBase64(imageFile);
    
    console.log("üì§ Enviando imagen a OpenAI Vision API...");

    // Llamada a OpenAI Vision API
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: "gpt-4o", // Modelo con capacidad de visi√≥n
        messages: [
          {
            role: "system",
            content: `Eres un experto en an√°lisis de diagramas UML de clases. Tu tarea es analizar im√°genes de diagramas de clases (incluso dibujados a mano) y extraer su informaci√≥n de forma estructurada.

IMPORTANTE: Devuelve √öNICAMENTE un objeto JSON v√°lido, sin texto adicional, sin bloques de c√≥digo markdown, sin explicaciones.

REGLAS DE AN√ÅLISIS:

1. VERIFICACI√ìN INICIAL:
   - Confirma que es un diagrama de clases UML
   - Si no lo es, devuelve: {"valido": false, "mensaje": "No es un diagrama de clases UML"}

2. EXTRACCI√ìN DE CLASES:
   - Identifica todas las clases (rect√°ngulos con nombre)
   - Nombre de clase en PascalCase (primera letra may√∫scula)
   - Sin espacios, sin acentos (ej: "Categoria" no "Categor√≠a")
   - Atributos: SOLO nombres, sin visibilidad (+,-,#), sin tipos de datos
   - M√©todos: OPCIONAL, lista simple de nombres

3. TIPOS DE RELACIONES (devuelve el nombre descriptivo):
   - "herencia" ‚Üí tri√°ngulo o flecha cerrada apuntando a clase padre
   - "composicion" ‚Üí rombo relleno/negro en un extremo
   - "agregacion" ‚Üí rombo vac√≠o/blanco en un extremo
   - "asociacion" ‚Üí l√≠nea simple entre clases
   - "asociacion_directa" ‚Üí l√≠nea con flecha abierta (‚Üí)
   - "dependencia" ‚Üí l√≠nea punteada con flecha
   - "realizacion" ‚Üí l√≠nea punteada con tri√°ngulo

4. MULTIPLICIDADES (formato est√°ndar):
   - "1" ‚Üí uno
   - "*" ‚Üí muchos/varios
   - "0..1" ‚Üí cero o uno
   - "1..*" ‚Üí uno o muchos
   - "0..*" ‚Üí cero o muchos
   - Si no es legible, dejar vac√≠o ""

5. ASOCIACIONES CON CLASE INTERMEDIA:
   - Si detectas una clase que conecta dos clases con relaciones especiales
   - Crear entrada en "asociaciones" con clase1, clase2, claseIntermedia

6. NORMALIZACI√ìN:
   - Nombres en PascalCase: "usuario pedido" ‚Üí "UsuarioPedido"
   - Sin acentos: "categor√≠a" ‚Üí "Categoria"
   - Sin espacios: "Nombre Completo" ‚Üí "NombreCompleto"

FORMATO DE RESPUESTA JSON:
{
  "valido": true,
  "mensaje": "Diagrama procesado correctamente",
  "confianza": "alta|media|baja",
  "tipoImagen": "image/png",
  "clases": [
    {
      "nombre": "Usuario",
      "atributos": ["nombre", "email", "telefono"],
      "metodos": ["login", "logout"]
    }
  ],
  "relaciones": [
    {
      "desde": "Usuario",
      "hacia": "Pedido",
      "tipo": "asociacion",
      "multiplicidad1": "1",
      "multiplicidad2": "*",
      "nombre": ""
    }
  ],
  "asociaciones": [
    {
      "clase1": "Usuario",
      "clase2": "Proyecto",
      "claseIntermedia": "Participacion"
    }
  ]
}

Si la imagen est√° borrosa o no es clara:
- Prioriza: nombres de clases > atributos > relaciones > multiplicidades
- Indica "confianza": "baja" o "media"
- En el mensaje explica qu√© no se pudo detectar claramente`
          },
          {
            role: "user",
            content: [
              {
                type: "text",
                text: "Analiza este diagrama de clases y extrae toda la informaci√≥n seg√∫n las reglas especificadas. Devuelve SOLO el JSON, sin texto adicional."
              },
              {
                type: "image_url",
                image_url: {
                  url: `data:${imageFile.type};base64,${base64Image}`,
                  detail: "high" // Alta resoluci√≥n para mejor detecci√≥n
                }
              }
            ]
          }
        ],
        max_tokens: 2000,
        temperature: 0.1, // Baja temperatura para respuestas m√°s consistentes
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`‚ùå Error en OpenAI API: ${response.status} - ${response.statusText}`);
      console.error(`üìÑ Respuesta del servidor:`, errorText);
      throw new Error(`Error en la API de OpenAI: ${response.status} - ${response.statusText}`);
    }

    const data = await response.json();
    console.log(`üìä Respuesta de OpenAI Vision:`, data);

    let raw = data.choices[0].message.content.trim();
    console.log(`üìù Contenido extra√≠do:`, raw);

    // Limpiar markdown si lo devuelve con ```json ... ```
    raw = raw.replace(/```json/g, "").replace(/```/g, "").trim();

    // Extraer JSON v√°lido
    const jsonMatch = raw.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      console.error(`‚ùå No se encontr√≥ JSON v√°lido en la respuesta:`, raw);
      throw new Error("La IA no devolvi√≥ un JSON v√°lido");
    }

    const diagramData = JSON.parse(jsonMatch[0]);
    console.log(`‚úÖ Diagrama parseado exitosamente:`, diagramData);

    // Validaci√≥n b√°sica
    if (!diagramData.valido) {
      throw new Error(diagramData.mensaje || "La imagen no contiene un diagrama de clases v√°lido");
    }

    // Normalizar estructura para asegurar compatibilidad
    const normalizedData = {
      valido: diagramData.valido,
      mensaje: diagramData.mensaje || "Diagrama procesado",
      confianza: diagramData.confianza || "media",
      clases: diagramData.clases || [],
      relaciones: diagramData.relaciones || [],
      asociaciones: diagramData.asociaciones || []
    };

    console.log(`üéâ Procesamiento completado. Clases: ${normalizedData.clases.length}, Relaciones: ${normalizedData.relaciones.length}, Asociaciones: ${normalizedData.asociaciones.length}`);

    return normalizedData;

  } catch (error) {
    console.error("‚ùå Error al procesar la imagen:", error);
    throw error;
  }
}

/**
 * Convierte un archivo de imagen a base64
 * @param {File} file - Archivo de imagen
 * @returns {Promise<string>} - String base64 de la imagen
 */
function convertImageToBase64(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    
    reader.onload = () => {
      // Remover el prefijo "data:image/xxx;base64,"
      const base64String = reader.result.split(',')[1];
      resolve(base64String);
    };
    
    reader.onerror = (error) => {
      reject(new Error(`Error al leer la imagen: ${error}`));
    };
    
    reader.readAsDataURL(file);
  });
}

/**
 * Valida el tama√±o de la imagen (OpenAI tiene l√≠mite de 20MB)
 * @param {File} file - Archivo de imagen
 * @returns {boolean} - true si es v√°lido
 */
export function validateImageSize(file) {
  const maxSizeInBytes = 20 * 1024 * 1024; // 20MB
  return file.size <= maxSizeInBytes;
}

/**
 * Valida el tipo de imagen
 * @param {File} file - Archivo de imagen
 * @returns {boolean} - true si es v√°lido
 */
export function validateImageType(file) {
  const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];
  return validTypes.includes(file.type);
}

